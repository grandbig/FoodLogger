//
//  MapViewInteractor.swift
//  FoodLogger
//
//  Created by Takahiro Kato on 2017/09/24.
//  Copyright © 2017年 Takahiro Kato. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreLocation

protocol MapViewBusinessLogic {
    func initMapView(request: MapView.InitMapView.Request)
    func fetchMyShop(request: MapView.FetchMyShop.Request)
    func fetchAroundShop(request: MapView.FetchAroundShop.Request)
    func selectShop(request: MapView.SelectShop.Request)
}

protocol MapViewDataStore {
    var selectedShop: HotpepperShop { get set }
    var myLocation: CLLocation { get set }
}

class MapViewInteractor: MapViewBusinessLogic, MapViewDataStore {
    
    var presenter: MapViewPresentationLogic?
    var worker = ShopsWorker(dataStore: RealmShopManager.sharedInstance)
    var mapViewWorker: MapViewWorker?
    var selectedShop = HotpepperShop()
    var myLocation = CLLocation()
    
    var myShops: [MyShop]?
    var searchedShops: [HotpepperShop]?
    var initView: Bool = false
  
    // MARK: Init map view
    func initMapView(request: MapView.InitMapView.Request) {
        if !initView {
            let response = MapView.InitMapView.Response(latitude: request.latitude, longitude: request.longitude)
            presenter?.presentInitMapView(response: response)
            initView = true
        }
    }
    
    // MARK: Fetch my shop
    func fetchMyShop(request: MapView.FetchMyShop.Request) {
        worker.fetchShops { (shops) in
            if shops != nil {
                self.myShops = shops
            }
            let response = MapView.FetchMyShop.Response(shops: shops)
            self.presenter?.presentFetchedMyShops(response: response)
        }
    }
    
    // MARK: Fetch around shop
    func fetchAroundShop(request: MapView.FetchAroundShop.Request) {
        var isFirstSearch: Bool = true
        if self.searchedShops != nil {
            isFirstSearch = false
        }
        
        mapViewWorker = MapViewWorker()
        mapViewWorker?.searchShop(latitude: request.latitude, longitude: request.longitude, success: { (shops) in
            if let myShops = self.myShops {
                // 登録済みショップとの差分計算
                for shop in shops {
                    for myShop in myShops where shop.id != myShop.id {
                        self.searchedShops?.append(shop)
                    }
                }
            } else {
                self.searchedShops = shops
            }
            
            let response = MapView.FetchAroundShop.Response(shops: self.searchedShops, isError: false, isFirstSearch: isFirstSearch)
            self.presenter?.presentFetchedAroundShops(response: response)
        }, failure: { _ in
            let response = MapView.FetchAroundShop.Response(shops: self.searchedShops, isError: true, isFirstSearch: isFirstSearch)
            self.presenter?.presentFetchedAroundShops(response: response)
        })
    }
    
    // MARK: Select one shop
    func selectShop(request: MapView.SelectShop.Request) {
        self.selectedShop = request.shop
        self.myLocation = CLLocation(latitude: request.latitude, longitude: request.longitude)
        let response = MapView.SelectShop.Response()
        self.presenter?.presentSelectedShop(response: response)
    }
}
