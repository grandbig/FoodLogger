//
//  MapViewPresenter.swift
//  FoodLogger
//
//  Created by Takahiro Kato on 2017/09/24.
//  Copyright © 2017年 Takahiro Kato. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MapViewPresentationLogic {
    func presentInitMapView(response: MapView.InitMapView.Response)
    func presentSavedMapView(response: MapView.SavedMapView.Response)
    func presentFetchedMyShops(response: MapView.FetchMyShop.Response)
    func presentFetchedAroundShops(response: MapView.FetchAroundShop.Response)
    func presentSelectedShop(response: MapView.SelectShop.Response)
}

class MapViewPresenter: MapViewPresentationLogic {
    weak var viewController: MapViewDisplayLogic?

    // MARK: Init map view
    func presentInitMapView(response: MapView.InitMapView.Response) {
        let viewModel = MapView.InitMapView.ViewModel(latitude: response.latitude, longitude: response.longitude, zoomLevel: 16.0)
        viewController?.displayInitMap(viewModel: viewModel)
    }
    
    // MARK: Saved map view
    func presentSavedMapView(response: MapView.SavedMapView.Response) {
        let viewModel = MapView.SavedMapView.ViewModel(marker: response.marker, shop: response.shop as HotpepperShop, rating: response.shop.rating)
        viewController?.displaySavedMap(viewModel: viewModel)
    }
    
    // MARK: Present my shop
    func presentFetchedMyShops(response: MapView.FetchMyShop.Response) {
        var displayedShops: [MapView.FetchMyShop.ViewModel.SavedMarker] = []
        if let shops = response.shops {
            for shop in shops {
                let hotpepperShop = shop as HotpepperShop
                let savedMarker = MapView.FetchMyShop.ViewModel.SavedMarker(shop: hotpepperShop, rating: shop.rating, type: MarkerType.saved)
                displayedShops.append(savedMarker)
            }
        }
        let viewModel = MapView.FetchMyShop.ViewModel(savedMarkers: displayedShops)
        viewController?.displayMyShop(viewModel: viewModel)
    }
    
    // MARK: Present around shop
    func presentFetchedAroundShops(response: MapView.FetchAroundShop.Response) {
        if !response.isError {
            var displayedShops: [MapView.FetchAroundShop.ViewModel.SearchedMarker] = []
            if let shops = response.shops {
                for shop in shops {
                    let searchedMarker = MapView.FetchAroundShop.ViewModel.SearchedMarker(shop: shop, type: MarkerType.searched)
                    displayedShops.append(searchedMarker)
                }
            }
            let viewModel = MapView.FetchAroundShop.ViewModel(searchedMarkers: displayedShops, isFirstSearch: response.isFirstSearch)
            viewController?.displaySearchedShop(viewModel: viewModel)
        } else {
            let viewModel = MapView.FetchAroundShop.ViewModel(searchedMarkers: nil, isFirstSearch: response.isFirstSearch)
            viewController?.displayFailedToSearchShop(viewModel: viewModel)
        }
    }
    
    // MARK: Select one shop
    func presentSelectedShop(response: MapView.SelectShop.Response) {
        viewController?.transitionToShopDetail(viewModel: MapView.SelectShop.ViewModel())
    }
}
