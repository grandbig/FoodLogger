//
//  MapViewController.swift
//  FoodLogger
//
//  Created by Takahiro Kato on 2017/09/24.
//  Copyright © 2017年 Takahiro Kato. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import GoogleMaps
import SwiftyJSON
import RealmSwift

protocol MapViewDisplayLogic: class {
    func displayInitMap(viewModel: MapView.InitMapView.ViewModel)
    func displaySavedMap(viewModel: MapView.SavedMapView.ViewModel)
    func displayMyShop(viewModel: MapView.FetchMyShop.ViewModel)
    func displaySearchedShop(viewModel: MapView.FetchAroundShop.ViewModel)
    func displayFailedToSearchShop(viewModel: MapView.FetchAroundShop.ViewModel)
    func transitionToShopDetail(viewModel: MapView.SelectShop.ViewModel)
}

class MapViewController: UIViewController, UINavigationControllerDelegate, MapViewDisplayLogic {
    var interactor: MapViewBusinessLogic?
    var router: (NSObjectProtocol & MapViewRoutingLogic & MapViewDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = MapViewInteractor()
        let presenter = MapViewPresenter()
        let router = MapViewRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        // 戻るボタンの設定
        let backButton = UIBarButtonItem.init()
        backButton.title = "戻る"
        backButton.tintColor = UIColor.white
        self.navigationController?.navigationBar.tintColor = UIColor.white
        self.navigationItem.backBarButtonItem = backButton
        
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        // UINavigationControllerのDelegate設定
        self.navigationController?.delegate = self
        
        configureMapView()
        configureLocationManager()
        
        fetchMyShopOnLoad()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        let request = MapView.SavedMapView.Request()
        interactor?.savedMapView(request: request)
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: Map View Method
    /// マップビュー
    @IBOutlet weak var mapView: GMSMapView!
    /// 位置情報マネージャ
    internal var locationManager: CLLocationManager?
    /// 選択中マーカ
    internal var selectedMarker: CustomGMSMarker?
    
    func configureMapView() {
        // GoogleMapの初期化
        self.mapView.isMyLocationEnabled = true
        self.mapView.mapType = GMSMapViewType.normal
        self.mapView.settings.compassButton = true
        self.mapView.settings.myLocationButton = true
        self.mapView.settings.compassButton = true
        self.mapView.delegate = self
    }
    
    func configureLocationManager() {
        // 位置情報関連の初期化
        self.locationManager = CLLocationManager()
        self.locationManager?.desiredAccuracy = kCLLocationAccuracyBest
        self.locationManager?.requestWhenInUseAuthorization()
        self.locationManager?.startUpdatingLocation()
        self.locationManager?.delegate = self
    }
    
    func displayInitMap(viewModel: MapView.InitMapView.ViewModel) {
        // 初期描画時のマップ中心位置の移動
        let coordinate = CLLocationCoordinate2D(latitude: viewModel.latitude, longitude: viewModel.longitude)
        let camera = GMSCameraPosition.camera(withTarget: coordinate, zoom: viewModel.zoomLevel)
        mapView.camera = camera
    }
    
    func fetchMyShopOnLoad() {
        let request = MapView.FetchMyShop.Request()
        interactor?.fetchMyShop(request: request)
    }
    
    func displayMyShop(viewModel: MapView.FetchMyShop.ViewModel) {
        for savedMarker in viewModel.savedMarkers {
            putMarker(shop: savedMarker.shop, rating: savedMarker.rating, type: savedMarker.type)
        }
    }
    
    // MARK: Search Shop Method
    
    @IBAction func search(_ sender: Any) {
        guard let myCurrentLocation = mapView.myLocation else {
            showAlert(title: "確認", message: "位置情報が取得できません。端末の設定を確認してください。", completion: {})
            return
        }
        
        fetchAroundShopOnLoad(coordinate: myCurrentLocation.coordinate)
    }
    
    func fetchAroundShopOnLoad(coordinate: CLLocationCoordinate2D) {
        let request = MapView.FetchAroundShop.Request(latitude: coordinate.latitude, longitude: coordinate.longitude)
        interactor?.fetchAroundShop(request: request)
    }
    
    func displaySearchedShop(viewModel: MapView.FetchAroundShop.ViewModel) {
        if !viewModel.isFirstSearch {
            // 既にマップ上に検索結果が表示されている場合
            // 全てのマーカを削除
            mapView.clear()
            // 保存済みショップマーカをプロット
            fetchMyShopOnLoad()
        }
        if let searchedMarkers = viewModel.searchedMarkers {
            for searchedMarker in searchedMarkers {
                putMarker(shop: searchedMarker.shop, rating: nil, type: searchedMarker.type)
            }
        }
    }
    
    func displayFailedToSearchShop(viewModel: MapView.FetchAroundShop.ViewModel) {
        showAlert(title: "確認", message: "周辺のショップ情報を取得できませんでした。", completion: {})
    }
    
    // MARK: Transition to shop detail
    func selectShop(marker: CustomGMSMarker,shop: HotpepperShop) {
        let latitude = mapView.myLocation?.coordinate.latitude ?? 0
        let longitude = mapView.myLocation?.coordinate.longitude ?? 0
        let request = MapView.SelectShop.Request(marker: marker, shop: shop, latitude: latitude, longitude: longitude)
        interactor?.selectShop(request: request)
    }
    
    func transitionToShopDetail(viewModel: MapView.SelectShop.ViewModel) {
        // 画面遷移
        router?.routeToShopDetail(segue: nil)
    }
    
    // MARK: Saved map view
    func displaySavedMap(viewModel: MapView.SavedMapView.ViewModel) {
        let marker = viewModel.marker
        marker.map = nil
        putMarker(shop: viewModel.shop, rating: viewModel.rating, type: MarkerType.saved)
    }
    
    // MARK: Other
    /**
     マップにマーカをプロットする処理
     
     - parameter shop: ショップデータ
     - parameter rating: 評価
     - parameter type: マーカタイプ
     */
    private func putMarker(shop: HotpepperShop, rating: Int?, type: MarkerType) {
        let marker = CustomGMSMarker()
        marker.id = shop.id
        marker.shopName = shop.name
        marker.categoryName = shop.category
        marker.imageURL = shop.imageURL
        marker.shopURL = shop.shopURL
        marker.position = CLLocationCoordinate2D(latitude: shop.latitude ?? 0, longitude: shop.longitude ?? 0)
        marker.rating = rating
        marker.type = type
        if type == MarkerType.saved {
            marker.icon = UIImage(named: "savedShopIcon")
        } else {
            marker.icon = UIImage(named: "searchedShopIcon")
        }
        marker.appearAnimation = GMSMarkerAnimation.pop
        marker.map = self.mapView
    }
    
    @IBAction func showHotpepperCreditPage(_ sender: Any) {
        let url = URL(string: "http://webservice.recruit.co.jp/")
        UIApplication.shared.open(url!, options: [:], completionHandler: nil)
    }
    
    @IBAction func unwindToViewController(segue: UIStoryboardSegue) {
    }
}

extension MapViewController: CLLocationManagerDelegate {
    
    func locationManager(_ manager: CLLocationManager, didChangeAuthorization status: CLAuthorizationStatus) {
        switch status {
        case .notDetermined:
            break
        case .restricted, .denied:
            break
        case .authorizedWhenInUse:
            break
        default:
            break
        }
    }
    
    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {
        if let coordinate = locations.last?.coordinate {
            let request = MapView.InitMapView.Request(latitude: coordinate.latitude, longitude: coordinate.longitude)
            interactor?.initMapView(request: request)
        }
    }
    
    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {
        if !CLLocationManager.locationServicesEnabled() {
            // 端末の位置情報がOFFになっている場合
            // アラートはデフォルトで表示されるので内部で用意はしない
            return
        }
        if CLLocationManager.authorizationStatus() != CLAuthorizationStatus.authorizedWhenInUse {
            // アプリの位置情報許可をOFFにしている場合
            self.showAlert(title: "確認", message: "FoodLoggerで位置情報を取得することができません。設定から位置情報を許可してください。", completion: {
            })
            return
        }
    }
}

extension MapViewController: GMSMapViewDelegate {
    
    func mapView(_ mapView: GMSMapView, didTap marker: GMSMarker) -> Bool {
        guard let cMarker = marker as? CustomGMSMarker else {
            return true
        }
        self.selectedMarker = cMarker
        return false
    }
    
    func mapView(_ mapView: GMSMapView, markerInfoWindow marker: GMSMarker) -> UIView? {
        guard let cMarker = marker as? CustomGMSMarker else {
            return nil
        }
        cMarker.tracksInfoWindowChanges = true
        let view = MarkerInfoContentsView(frame: CGRect(x: 0, y: 0, width: 250, height: 265))
        view.setData(shopName: cMarker.shopName, categoryName: cMarker.categoryName, rating: cMarker.rating, shopImageURLString: cMarker.imageURL)
        return view
    }
    
    func mapView(_ mapView: GMSMapView, didTapInfoWindowOf marker: GMSMarker) {
        guard let cMarker = marker as? CustomGMSMarker else {
            return
        }
        guard let id = cMarker.id, let name = cMarker.shopName, let category = cMarker.categoryName, let imageURL = cMarker.imageURL, let shopURL = cMarker.shopURL else {
            return
        }
        let shop = HotpepperShop(id: id, name: name, category: category, imageURL: imageURL, latitude: cMarker.position.latitude, longitude: cMarker.position.longitude, shopURL: shopURL)
        selectShop(marker: cMarker, shop: shop)
    }
}
