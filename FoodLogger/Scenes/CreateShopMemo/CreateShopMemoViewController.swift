//
//  CreateShopMemoViewController.swift
//  FoodLogger
//
//  Created by Takahiro Kato on 2017/09/24.
//  Copyright © 2017年 Takahiro Kato. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Foundation
import UIKit
import CoreLocation
import SafariServices
import HCSStarRatingView
import NVActivityIndicatorView
import RealmSwift

protocol CreateShopMemoDisplayLogic: class {
    func displayShopStatus(viewModel: CreateShopMemo.FetchShopStatus.ViewModel)
    func displayCreatedMyShop(viewModel: CreateShopMemo.CreateMyShop.ViewModel)
    func displayUpdatedMyShop(viewModel: CreateShopMemo.UpdateMyShop.ViewModel)
    func displayFailureToCreateMyShop(viewModel: CreateShopMemo.CreateMyShop.ViewModel)
}

class CreateShopMemoViewController: UIViewController, UINavigationControllerDelegate, CreateShopMemoDisplayLogic {
    var interactor: CreateShopMemoBusinessLogic?
    var router: (NSObjectProtocol & CreateShopMemoRoutingLogic & CreateShopMemoDataPassing)?
    /// TODO: 食品画像リスト
    var images: [UIImage]! = [UIImage]()
    var selectedIndexPath: IndexPath!
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = CreateShopMemoInteractor()
        let presenter = CreateShopMemoPresenter()
        let router = CreateShopMemoRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        configureContainerView()
        fetchShopStatus()
    }
    
    // MARK: Do something
    
    /// 評価用のレーティングビュー
    @IBOutlet weak var ratingBar: HCSStarRatingView!
    /// UICollectionView
    @IBOutlet weak var collectionView: UICollectionView!
    /// 食事種別のUISegmentedControl
    @IBOutlet weak var segmentedControl: UISegmentedControl!
    /// テキストエリア
    @IBOutlet weak var placeTextArea: UIPlaceHolderTextView!
    /// ローディングビュー
    @IBOutlet weak var loadingView: UIView!
    /// ローディングアイコン
    @IBOutlet weak var indicatorView: NVActivityIndicatorView!
    /// ナビゲーションバーに右ボタン
    @IBOutlet weak var navRightButton: UIButton!
    
    func configureContainerView() {
        self.title = "メモ"
        
        self.collectionView.dataSource = self
        self.collectionView.delegate = self
        
        self.placeTextArea.placeHolder = "メモを入力"
        self.placeTextArea.placeHolderColor = UIColor(red: 0.75, green: 0.75, blue: 0.77, alpha: 1.0)
        
        createToolBar()
        determineMealTime()
        
        // TODO: 別導線から遷移してきた場合の対応
//        if !self.isRightButton {
//            self.navRightButton.isHidden = true
//        }
    }
    
    func fetchShopStatus() {
        let request = CreateShopMemo.FetchShopStatus.Request()
        interactor?.fetchShopStatus(request: request)
    }
    
    func displayShopStatus(viewModel: CreateShopMemo.FetchShopStatus.ViewModel) {
        if let shop = viewModel.savedShop.shop {
            // 保存済みショップの場合
            ratingBar.value = CGFloat(shop.rating)
            placeTextArea.text = shop.memo
            images = shop.foodImages
            segmentedControl.selectedSegmentIndex = shop.mealTime
        }
    }
    
    // MARK: Save my shop
    @IBAction func saveShop(_ sender: Any) {
        createMyShop()
    }
    
    func createMyShop() {
        // 完全な固定文言なのでViewControllerに書く
        // 確認アラートを表示
        self.showConfirm(title: "確認", message: "このショップへの来店履歴を保存しますか？", okCompletion: {
            // ローディングビューの表示
            self.showLoadingView()
            
            let request = CreateShopMemo.CreateMyShop.Request(rating: Int(self.ratingBar.value), memo: self.placeTextArea.text, images: self.images, mealTime: self.segmentedControl.selectedSegmentIndex)
            self.interactor?.createMyShop(request: request)
        }) {}
    }
    
    func displayCreatedMyShop(viewModel: CreateShopMemo.CreateMyShop.ViewModel) {
        // ローディングビューの非表示
        self.hiddenLoadingView()
        
        // 保存完了アラートを表示
        self.showAlert(title: "確認", message: "ショップへの来店履歴を保存しました", completion: {
            //self.isSaved = true
            self.navigationController?.popToRootViewController(animated: true)
        })
    }
    
    func displayFailureToCreateMyShop(viewModel: CreateShopMemo.CreateMyShop.ViewModel) {
        // ローディングビューの非表示
        self.hiddenLoadingView()
        let defaultMessage = "ショップへの来店履歴の保存に失敗しました。"
        self.showAlert(title: "確認", message: viewModel.message ?? defaultMessage, completion: {})
    }
    
    // MARK: Update My Shop
    func updateMyShop() {
        // 完全な固定文言なのでViewControllerに書く
        // 確認アラートを表示
        self.showConfirm(title: "確認", message: "このショップへの記録を更新しますか？", okCompletion: {
            // ローディングビューの表示
            self.showLoadingView()
        }) {}
    }
    
    func displayUpdatedMyShop(viewModel: CreateShopMemo.UpdateMyShop.ViewModel) {
        
    }
    
    // MARK: Upload Image
    func uploadImage() {
        
    }
    
    func displayUploadedImage() {
        
    }
    
    // MARK: Show Shop Info
    @IBAction func showShopInfo(_ sender: Any) {
        // TODO: 処理の実装が必要
//        let shopURL = NSURL(string: self.shop.shopURL!)
//
//        if let shopURL = shopURL {
//            let safariViewController = SFSafariViewController(url: shopURL as URL)
//            present(safariViewController, animated: true, completion: nil)
//        }
    }
    
    // MARK: Other
    /// キーボード用ツールバーの生成処理
    func createToolBar() {
        let kbToolBar = UIToolbar(frame: CGRect(x: 0, y: 0, width: UIScreen.main.bounds.size.width, height: 40))
        kbToolBar.barStyle = UIBarStyle.default
        kbToolBar.sizeToFit()
        let spacer = UIBarButtonItem(barButtonSystemItem: UIBarButtonSystemItem.flexibleSpace, target: self, action: nil)
        let commitButton = UIBarButtonItem(barButtonSystemItem: UIBarButtonSystemItem.done, target: self, action: #selector(self.doneButtonTapped))
        kbToolBar.items = [spacer, commitButton]
        
        self.placeTextArea.inputAccessoryView = kbToolBar
    }
    
    /// ツールバーのDONEボタンタップ時の処理
    func doneButtonTapped() {
        self.view.endEditing(true)
    }
    
    /**
     現在時刻から自動で食事種別を判別する処理
     */
    private func determineMealTime() {
        let now = Date()
        let cal = Calendar.current
        var dataComps = cal.dateComponents([.year, .month, .day, .hour, .minute], from: now)
        let hour = dataComps.hour
        
        if let hour = hour {
            if hour >= 5 && hour < 11 {
                self.segmentedControl.selectedSegmentIndex = 0
            } else if hour >= 11 && hour < 15 {
                self.segmentedControl.selectedSegmentIndex = 1
            } else if hour >= 17 && hour <= 24 {
                self.segmentedControl.selectedSegmentIndex = 2
            } else {
                self.segmentedControl.selectedSegmentIndex = 3
            }
        }
    }
    
    /// カメラビューの表示処理
    func pickImageFromCamera() {
        if UIImagePickerController.isSourceTypeAvailable(UIImagePickerControllerSourceType.camera) {
            let controller = UIImagePickerController()
            controller.delegate = self
            controller.sourceType = UIImagePickerControllerSourceType.camera
            present(controller, animated: true, completion: nil)
        }
    }
    
    /// アルバムビューの表示処理
    func pickImageFromAlbum() {
        if UIImagePickerController.isSourceTypeAvailable(UIImagePickerControllerSourceType.photoLibrary) {
            let controller = UIImagePickerController()
            controller.delegate = self
            controller.sourceType = UIImagePickerControllerSourceType.photoLibrary
            present(controller, animated: true, completion: nil)
        }
    }
    
    /**
     ローディングビューの表示
     */
    private func showLoadingView() {
        self.loadingView.isHidden = false
        self.indicatorView.startAnimating()
    }
    
    /**
     ローディングビューの非表示
     */
    private func hiddenLoadingView() {
        self.loadingView.isHidden = true
        self.indicatorView.stopAnimating()
    }
}

extension CreateShopMemoViewController: UICollectionViewDataSource, UICollectionViewDelegate {
    
    // MARK: UICollectionViewDataSource
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "Cell", for: indexPath)
        
        if self.images.count > 0 {
            // 保存した写真がある場合
            if (self.images.count - 1) >= indexPath.row {
                // 保存した写真の場合
                cell.backgroundView = UIImageView(image: self.images[indexPath.row])
            } else {
                // 写真追加枠
                cell.backgroundView = UIImageView(image: UIImage(named: "NoImageIcon"))
            }
        } else {
            // 保存した写真がない場合
            cell.backgroundView = UIImageView(image: UIImage(named: "NoImageIcon"))
        }
        
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        if self.images.count > 0 {
            return self.images.count + 1
        }
        return 1
    }
    
    // MARK: UICollectionViewDelegate
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        self.selectedIndexPath = indexPath
        let message = "カメラまたはアルバムからアップロードしますか？"
        let firstActionTitle = "カメラからアップロード"
        let secondActionTitle = "アルバムからアップロード"
        self.showActionSheet(message: message, firstActionTitle: firstActionTitle, secondActionTitle: secondActionTitle, firstCompletion: {
            // カメラビューを起動
            self.pickImageFromCamera()
        }) {
            // アルバムビューを起動
            self.pickImageFromAlbum()
        }
    }
}

extension CreateShopMemoViewController: UIImagePickerControllerDelegate {
    
    // MARK: UIImagePickerControllerDelegate
    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : Any]) {
        guard let info = info[UIImagePickerControllerOriginalImage] else {
            return
        }
        guard let image = info as? UIImage else {
            return
        }
        if let selectedCell = self.collectionView.cellForItem(at: self.selectedIndexPath) {
            let row = self.selectedIndexPath.row
            selectedCell.backgroundView = UIImageView(image: image)
            
            if self.images.count < row + 1 {
                // 新規画像のアップロード
                self.images.append(image)
                // UICollectionViewのリロード
                self.collectionView.reloadData()
            } else if row < self.images.count {
                // 既存画像の差し替え
                self.images[row] = image
            }
        }
        picker.dismiss(animated: true, completion: nil)
    }
}

extension CreateShopMemoViewController: UITextFieldDelegate {
    // MARK: UITextFieldDelegate
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        // キーボードを閉じる
        textField.resignFirstResponder()
        
        return true
    }
}

/*
class CreateShopMemoViewController: UIViewController, UINavigationControllerDelegate {
    /// 現在地
    internal var myLocation: CLLocation?
    /// ショップの保存済/未保存フラグ
    internal var isSaved: Bool = false
    /// 店舗情報ボタンの表示/非表示フラグ
    internal var isRightButton: Bool = false
    /// 選択したIndexPath
    internal var selectedIndexPath: IndexPath!
    /// 現在地からショップまでの許容できる最大距離
    private var maxDistance: Double = 300
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        if let accuracy = self.myLocation?.horizontalAccuracy, accuracy > 10 {
            self.maxDistance = accuracy
        }
        
        guard let shopId = self.shop.id else {
            return
        }
        
        if let shop = self.realmShopManager.selectById(shopId)?[0] {
            // 保存済みショップの場合
            self.isSaved = true
        }
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    /**
     ショップの更新処理
     */
    private func updateShop() {
        let globalQueue = DispatchQueue.global(qos: DispatchQoS.QoSClass.default)
        let mainQueue = DispatchQueue.main
        
        // 確認アラートを表示
        self.showConfirm(title: "確認", message: "このショップへの記録を更新しますか？", okCompletion: {
            // ローディングビューの表示
            self.showLoadingView()
            
            globalQueue.async {
                // 画像データの変換
                var imageDatas: [Data]? = nil
                if let images = self.images, images.count > 0 {
                    imageDatas = [Data]()
                    for image in images {
                        let imageData = NSData.init(data: UIImageJPEGRepresentation(image, 1.0)!) as Data
                        imageDatas?.append(imageData)
                    }
                }
                // データを更新
                guard let shopId = self.shop.id else {
                    mainQueue.async {
                        // ローディングビューの非表示
                        self.hiddenLoadingView()
                        self.showAlert(title: "確認", message: "ショップ情報が正しく取得できません。", completion: {})
                    }
                    return
                }
                self.realmShopManager.updateShop(id: shopId, rating: Int(self.ratingBar.value), images: imageDatas, mealTime: self.segmentedControl.selectedSegmentIndex, memo: self.placeTextArea.text)
                
                mainQueue.async {
                    // ローディングビューの非表示
                    self.hiddenLoadingView()
                    // 保存完了アラートを表示
                    self.showAlert(title: "確認", message: "ショップの記録を更新しました", completion: {
                        self.isSaved = true
                        self.navigationController?.popViewController(animated: true)
                    })
                }
            }
        }) {}
    }
}
 */
 
